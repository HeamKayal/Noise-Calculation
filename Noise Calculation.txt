<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Noise Level Analysis</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@2.1.0/dist/chartjs-plugin-annotation.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
        }
        h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 20px;
        }
        .upload-container {
            border: 2px dashed #3498db;
            padding: 25px;
            text-align: center;
            margin-bottom: 25px;
            border-radius: 8px;
            background-color: #f8fafc;
        }
        .results {
            background-color: #f9f9f9;
            padding: 20px;
            border-radius: 8px;
            margin-top: 25px;
            display: none;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        th, td {
            border: 1px solid #ddd;
            padding: 12px;
            text-align: left;
        }
        th {
            background-color: #3498db;
            color: white;
            font-weight: bold;
        }
        tr:nth-child(even) {
            background-color: #f2f2f2;
        }
        button {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            margin: 8px;
            transition: background-color 0.3s;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        button:hover {
            background-color: #2980b9;
        }
        .download-btn {
            background-color: #27ae60;
        }
        .download-btn:hover {
            background-color: #219653;
        }
        .simulate-btn {
            background-color: #e67e22;
        }
        .simulate-btn:hover {
            background-color: #d35400;
        }
        .instructions {
            background-color: #fffde7;
            padding: 20px;
            border-left: 5px solid #ffd600;
            margin-bottom: 25px;
            border-radius: 0 8px 8px 0;
        }
        .chart-container {
            margin: 30px 0;
            height: 500px;
            background-color: white;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .tabs {
            display: flex;
            margin-bottom: 20px;
            border-bottom: 1px solid #ddd;
        }
        .tab {
            padding: 12px 25px;
            cursor: pointer;
            background-color: #eee;
            margin-right: 5px;
            border-radius: 5px 5px 0 0;
            font-weight: bold;
            transition: all 0.3s;
        }
        .tab.active {
            background-color: #3498db;
            color: white;
        }
        .tab:hover:not(.active) {
            background-color: #ddd;
        }
        .tab-content {
            display: none;
            animation: fadeIn 0.5s;
        }
        .tab-content.active {
            display: block;
        }
        .error {
            background-color: #ffebee;
            padding: 15px;
            border-left: 5px solid #f44336;
            margin-bottom: 20px;
            display: none;
            border-radius: 0 8px 8px 0;
            font-weight: bold;
        }
        #fileInput {
            display: none;
        }
        .file-upload-label {
            background-color: #3498db;
            color: white;
            padding: 12px 20px;
            border-radius: 6px;
            cursor: pointer;
            display: inline-block;
            margin: 10px;
            transition: background-color 0.3s;
        }
        .file-upload-label:hover {
            background-color: #2980b9;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
    </style>
</head>
<body>
    <h1>Noise Level Analysis Tool</h1>
    
    <div class="instructions">
        <h3>Instructions:</h3>
        <p>This tool analyzes noise measurement data and calculates key acoustic parameters:</p>
        <ul>
            <li><strong>Leq</strong>: Equivalent continuous sound level (energy average)</li>
            <li><strong>L10</strong>: Sound level exceeded 10% of the measurement period</li>
            <li><strong>L50</strong>: Median sound level (exceeded 50% of the time)</li>
            <li><strong>L90</strong>: Background noise level (exceeded 90% of the time)</li>
        </ul>
        <p><strong>Data requirements:</strong> Excel file with noise levels in dB (1-second intervals, 24 hours = 86,400 readings)</p>
        <p>For demonstration, you can generate simulated data with the "Simulate Data" button.</p>
    </div>
    
    <div class="upload-container">
        <h2>Upload Your Noise Data</h2>
        <label for="fileInput" class="file-upload-label">Choose Excel File</label>
        <input type="file" id="fileInput" accept=".xlsx, .xls, .csv" />
        <span id="fileName" style="margin-left:10px;">No file selected</span>
        <div style="margin-top:20px;">
            <button onclick="processFile()">Analyze Data</button>
            <button class="simulate-btn" onclick="simulateData()">Simulate Data</button>
        </div>
    </div>
    
    <div id="results" class="results">
        <div id="error" class="error"></div>
        
        <div class="tabs">
            <div class="tab active" onclick="showTab(event, 'summary')">Summary Results</div>
            <div class="tab" onclick="showTab(event, 'chart')">Noise Level Chart</div>
            <div class="tab" onclick="showTab(event, 'hourly')">Hourly Analysis</div>
        </div>
        
        <div id="summary" class="tab-content active">
            <h2>Noise Level Summary</h2>
            <table id="resultTable">
                <tr>
                    <th>Parameter</th>
                    <th>Value (dB)</th>
                    <th>Description</th>
                </tr>
                <tr>
                    <td>Leq</td>
                    <td id="leqValue">-</td>
                    <td>Equivalent continuous sound level (energy average)</td>
                </tr>
                <tr>
                    <td>L10</td>
                    <td id="l10Value">-</td>
                    <td>Sound level exceeded 10% of the time</td>
                </tr>
                <tr>
                    <td>L50</td>
                    <td id="l50Value">-</td>
                    <td>Sound level exceeded 50% of the time (median)</td>
                </tr>
                <tr>
                    <td>L90</td>
                    <td id="l90Value">-</td>
                    <td>Sound level exceeded 90% of the time (background noise)</td>
                </tr>
                <tr>
                    <td>Maximum Level</td>
                    <td id="maxValue">-</td>
                    <td>Highest measured sound level</td>
                </tr>
                <tr>
                    <td>Minimum Level</td>
                    <td id="minValue">-</td>
                    <td>Lowest measured sound level</td>
                </tr>
                <tr>
                    <td>Measurement Duration</td>
                    <td id="durationValue">-</td>
                    <td>Total time period analyzed</td>
                </tr>
            </table>
        </div>
        
        <div id="chart" class="tab-content">
            <h2>Noise Level Over Time</h2>
            <p>This chart shows the sound pressure level over time with key statistical parameters marked.</p>
            <div class="chart-container">
                <canvas id="noiseChart"></canvas>
            </div>
        </div>
        
        <div id="hourly" class="tab-content">
            <h2>Hourly Leq Analysis</h2>
            <p>Equivalent continuous sound levels calculated for each hour of measurement.</p>
            <table id="hourlyTable">
                <tr>
                    <th>Hour</th>
                    <th>Leq (dB)</th>
                    <th>L10 (dB)</th>
                    <th>L50 (dB)</th>
                    <th>L90 (dB)</th>
                </tr>
                <!-- Hourly data will be inserted here -->
            </table>
        </div>
        
        <div style="text-align: center; margin-top: 30px;">
            <button id="downloadBtn" class="download-btn" onclick="downloadResults()">Download Full Report</button>
        </div>
    </div>
    
    <script>
        // Global variables
        let calculatedResults = {};
        let noiseChart = null;
        const expectedReadings = 86400; // 24 hours of 1-second readings
        const readingsPerHour = 3600; // 1 hour = 3600 seconds
        const minDb = 30; // Minimum expected dB value
        const maxDb = 120; // Maximum expected dB value

        // Initialize file input display
        document.getElementById('fileInput').addEventListener('change', function(e) {
            const fileName = e.target.files[0] ? e.target.files[0].name : 'No file selected';
            document.getElementById('fileName').textContent = fileName;
        });

        // Tab navigation
        function showTab(event, tabId) {
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            document.getElementById(tabId).classList.add('active');
            
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });
            event.currentTarget.classList.add('active');
            
            if (tabId === 'chart' && noiseChart === null && calculatedResults.rawData) {
                renderChart();
            }
            
            if (tabId === 'hourly' && calculatedResults.hourlyMetrics) {
                renderHourlyTable();
            }
        }

        // Generate simulated data
        function simulateData() {
            // Create realistic noise pattern (quieter at night, louder during day)
            const noiseLevels = [];
            const baseNightLevel = 45;
            const baseDayLevel = 65;
            const variation = 8;
            
            for (let i = 0; i < expectedReadings; i++) {
                const hour = Math.floor(i / 3600) % 24;
                const isDaytime = hour >= 7 && hour < 19; // 7am to 7pm
                const baseLevel = isDaytime ? baseDayLevel : baseNightLevel;
                
                // Add random variation and occasional spikes
                let level = baseLevel + (Math.random() * variation - variation/2);
                if (Math.random() < 0.005) level += 15 + Math.random() * 10; // Occasional spikes
                
                noiseLevels.push(Math.max(minDb, Math.min(maxDb, level)));
            }
            
            processData(noiseLevels);
        }

        // Process uploaded file
        function processFile() {
            const fileInput = document.getElementById('fileInput');
            const file = fileInput.files[0];
            const errorDiv = document.getElementById('error');
            
            if (!file) {
                errorDiv.textContent = 'Please select a file before analyzing.';
                errorDiv.style.display = 'block';
                return;
            }
            
            const reader = new FileReader();
            
            reader.onload = function(e) {
                try {
                    errorDiv.style.display = 'none';
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });
                    const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
                    const jsonData = XLSX.utils.sheet_to_json(firstSheet, { header: 1 });
                    
                    // Extract noise levels (try different columns if needed)
                    let noiseLevels = [];
                    if (jsonData[0] && jsonData[0].length > 1) {
                        // If header exists, find the dB column
                        const header = jsonData[0];
                        const dbCol = header.findIndex(cell => 
                            cell && cell.toString().toLowerCase().includes('db'));
                        noiseLevels = jsonData.slice(1).map(row => parseFloat(row[dbCol >= 0 ? dbCol : 1]));
                    } else {
                        // No header, assume dB values are in first column
                        noiseLevels = jsonData.map(row => parseFloat(row[0]));
                    }
                    
                    // Filter valid readings
                    noiseLevels = noiseLevels.filter(val => !isNaN(val) && val >= minDb && val <= maxDb);
                    
                    if (noiseLevels.length === 0) {
                        errorDiv.textContent = 'No valid noise level data found. Ensure the file contains numeric values between 30 and 120 dB.';
                        errorDiv.style.display = 'block';
                        return;
                    }
                    
                    if (noiseLevels.length !== expectedReadings) {
                        errorDiv.textContent = `Note: Expected ${expectedReadings} readings (24 hours), but found ${noiseLevels.length} valid readings. Analysis will use available data.`;
                        errorDiv.style.display = 'block';
                    } else {
                        errorDiv.style.display = 'none';
                    }
                    
                    processData(noiseLevels);
                } catch (error) {
                    errorDiv.textContent = 'Error processing file: ' + error.message;
                    errorDiv.style.display = 'block';
                    console.error(error);
                }
            };
            
            reader.onerror = function() {
                errorDiv.textContent = 'Error reading the file. Please try again with a valid Excel file.';
                errorDiv.style.display = 'block';
            };
            
            reader.readAsArrayBuffer(file);
        }

        // Process noise data and calculate metrics
        function processData(noiseLevels) {
            try {
                calculatedResults = calculateNoiseMetrics(noiseLevels);
                
                // Update summary table
                document.getElementById('leqValue').textContent = calculatedResults.Leq.toFixed(1);
                document.getElementById('l10Value').textContent = calculatedResults.L10.toFixed(1);
                document.getElementById('l50Value').textContent = calculatedResults.L50.toFixed(1);
                document.getElementById('l90Value').textContent = calculatedResults.L90.toFixed(1);
                document.getElementById('maxValue').textContent = calculatedResults.maxLevel.toFixed(1);
                document.getElementById('minValue').textContent = calculatedResults.minLevel.toFixed(1);
                
                // Format duration
                const hours = Math.floor(noiseLevels.length / 3600);
                const minutes = Math.floor((noiseLevels.length % 3600) / 60);
                const seconds = noiseLevels.length % 60;
                let durationText = '';
                if (hours > 0) durationText += `${hours} hour${hours !== 1 ? 's' : ''} `;
                if (minutes > 0) durationText += `${minutes} minute${minutes !== 1 ? 's' : ''} `;
                if (seconds > 0 || durationText === '') durationText += `${seconds} second${seconds !== 1 ? 's' : ''}`;
                document.getElementById('durationValue').textContent = durationText.trim();
                
                // Show results section
                document.getElementById('results').style.display = 'block';
                
                // Render chart if on chart tab
                if (document.querySelector('.tab.active').getAttribute('onclick').includes('chart')) {
                    renderChart();
                }
                
            } catch (error) {
                const errorDiv = document.getElementById('error');
                errorDiv.textContent = 'Error in calculations: ' + error.message;
                errorDiv.style.display = 'block';
                console.error(error);
            }
        }

        // Calculate all noise metrics
        function calculateNoiseMetrics(noiseLevels) {
            if (!noiseLevels || noiseLevels.length === 0) {
                throw new Error('No valid noise level data provided');
            }
            
            // Sort for percentile calculations
            const sortedLevels = [...noiseLevels].sort((a, b) => b - a);
            const maxLevel = Math.max(...noiseLevels);
            const minLevel = Math.min(...noiseLevels);
            
            // Calculate percentiles
            const L10 = sortedLevels[Math.floor(sortedLevels.length * 0.1)] || 0;
            const L50 = sortedLevels[Math.floor(sortedLevels.length * 0.5)] || 0;
            const L90 = sortedLevels[Math.floor(sortedLevels.length * 0.9)] || 0;
            
            // Calculate Leq (equivalent continuous sound level)
            const sumOfPowers = noiseLevels.reduce((sum, level) => {
                const power = Math.pow(10, level / 10);
                if (!isFinite(power)) {
                    throw new Error(`Invalid noise level detected: ${level} dB results in non-finite value`);
                }
                return sum + power;
            }, 0);
            
            const Leq = 10 * Math.log10(sumOfPowers / noiseLevels.length);
            
            // Calculate hourly metrics
            const hourlyMetrics = [];
            for (let hour = 0; hour < Math.ceil(noiseLevels.length / readingsPerHour); hour++) {
                const start = hour * readingsPerHour;
                const end = Math.min(start + readingsPerHour, noiseLevels.length);
                const hourData = noiseLevels.slice(start, end);
                
                if (hourData.length === 0) continue;
                
                // Calculate Leq for this hour
                const hourSumOfPowers = hourData.reduce((sum, level) => sum + Math.pow(10, level / 10), 0);
                const hourLeq = 10 * Math.log10(hourSumOfPowers / hourData.length);
                
                // Calculate percentiles for this hour
                const hourSorted = [...hourData].sort((a, b) => b - a);
                const hourL10 = hourSorted[Math.floor(hourSorted.length * 0.1)] || 0;
                const hourL50 = hourSorted[Math.floor(hourSorted.length * 0.5)] || 0;
                const hourL90 = hourSorted[Math.floor(hourSorted.length * 0.9)] || 0;
                
                hourlyMetrics.push({
                    hour: hour + 1,
                    Leq: hourLeq,
                    L10: hourL10,
                    L50: hourL50,
                    L90: hourL90,
                    readings: hourData.length
                });
            }
            
            return {
                Leq: Leq,
                L10: L10,
                L50: L50,
                L90: L90,
                maxLevel: maxLevel,
                minLevel: minLevel,
                rawData: noiseLevels,
                hourlyMetrics: hourlyMetrics,
                readingsCount: noiseLevels.length
            };
        }

        // Render the main noise level chart
        function renderChart() {
            const ctx = document.getElementById('noiseChart').getContext('2d');
            
            // Destroy previous chart if exists
            if (noiseChart) {
                noiseChart.destroy();
            }
            
            // Create time labels (every 10 minutes for performance)
            const timeLabels = [];
            const displayData = [];
            const sampleInterval = Math.max(1, Math.floor(calculatedResults.rawData.length / 1000)); // Show max 1000 points
            
            for (let i = 0; i < calculatedResults.rawData.length; i += sampleInterval) {
                const hours = Math.floor(i / 3600);
                const minutes = Math.floor((i % 3600) / 60);
                timeLabels.push(`${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`);
                displayData.push(calculatedResults.rawData[i]);
            }
            
            // Create chart
            noiseChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: timeLabels,
                    datasets: [
                        {
                            label: 'Sound Pressure Level (dB)',
                            data: displayData,
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1,
                            backgroundColor: 'rgba(75, 192, 192, 0.1)',
                            fill: true,
                            pointRadius: 0,
                            tension: 0.1
                        },
                        {
                            label: 'L10',
                            data: Array(timeLabels.length).fill(calculatedResults.L10),
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 2,
                            borderDash: [5, 5],
                            pointRadius: 0
                        },
                        {
                            label: 'L50',
                            data: Array(timeLabels.length).fill(calculatedResults.L50),
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 2,
                            borderDash: [5, 5],
                            pointRadius: 0
                        },
                        {
                            label: 'L90',
                            data: Array(timeLabels.length).fill(calculatedResults.L90),
                            borderColor: 'rgba(153, 102, 255, 1)',
                            borderWidth: 2,
                            borderDash: [5, 5],
                            pointRadius: 0
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Time (HH:MM)',
                                font: {
                                    weight: 'bold'
                                }
                            },
                            ticks: {
                                maxRotation: 45,
                                minRotation: 45,
                                autoSkip: true,
                                maxTicksLimit: 24
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Sound Pressure Level (dB)',
                                font: {
                                    weight: 'bold'
                                }
                            },
                            min: Math.max(calculatedResults.L90 - 10, 0),
                            max: Math.min(calculatedResults.L10 + 15, 120)
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'top',
                            labels: {
                                boxWidth: 12,
                                padding: 20,
                                font: {
                                    size: 12
                                }
                            }
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                            callbacks: {
                                label: function(context) {
                                    return `${context.dataset.label}: ${context.parsed.y.toFixed(1)} dB`;
                                }
                            }
                        },
                        annotation: {
                            annotations: {
                                maxLine: {
                                    type: 'line',
                                    yMin: calculatedResults.maxLevel,
                                    yMax: calculatedResults.maxLevel,
                                    borderColor: 'rgba(255, 159, 64, 1)',
                                    borderWidth: 2,
                                    borderDash: [5, 5],
                                    label: {
                                        display: true,
                                        content: `Max: ${calculatedResults.maxLevel.toFixed(1)} dB`,
                                        position: 'end',
                                        backgroundColor: 'rgba(255, 159, 64, 1)',
                                        color: 'white'
                                    }
                                },
                                minLine: {
                                    type: 'line',
                                    yMin: calculatedResults.minLevel,
                                    yMax: calculatedResults.minLevel,
                                    borderColor: 'rgba(201, 203, 207, 1)',
                                    borderWidth: 2,
                                    borderDash: [5, 5],
                                    label: {
                                        display: true,
                                        content: `Min: ${calculatedResults.minLevel.toFixed(1)} dB`,
                                        position: 'end',
                                        backgroundColor: 'rgba(201, 203, 207, 1)',
                                        color: 'white'
                                    }
                                }
                            }
                        }
                    },
                    interaction: {
                        mode: 'nearest',
                        axis: 'x',
                        intersect: false
                    }
                }
            });
        }

        // Render hourly analysis table
        function renderHourlyTable() {
            const table = document.getElementById('hourlyTable');
            // Clear existing rows (keep header)
            while (table.rows.length > 1) {
                table.deleteRow(1);
            }
            
            calculatedResults.hourlyMetrics.forEach(hour => {
                const row = table.insertRow();
                row.insertCell(0).textContent = `Hour ${hour.hour}`;
                row.insertCell(1).textContent = hour.Leq.toFixed(1);
                row.insertCell(2).textContent = hour.L10.toFixed(1);
                row.insertCell(3).textContent = hour.L50.toFixed(1);
                row.insertCell(4).textContent = hour.L90.toFixed(1);
            });
        }

        // Download results as Excel
        function downloadResults() {
            if (!calculatedResults.Leq) {
                const errorDiv = document.getElementById('error');
                errorDiv.textContent = 'No results to download. Please analyze data first.';
                errorDiv.style.display = 'block';
                return;
            }
            
            try {
                const wb = XLSX.utils.book_new();
                
                // Summary sheet
                const summaryData = [
                    ["Noise Level Analysis Report", "", "", ""],
                    ["Generated on", new Date().toLocaleString(), "", ""],
                    ["", "", "", ""],
                    ["Parameter", "Value (dB)", "Description", ""],
                    ["Leq", calculatedResults.Leq.toFixed(1), "Equivalent continuous sound level", ""],
                    ["L10", calculatedResults.L10.toFixed(1), "Sound level exceeded 10% of the time", ""],
                    ["L50", calculatedResults.L50.toFixed(1), "Sound level exceeded 50% of the time (median)", ""],
                    ["L90", calculatedResults.L90.toFixed(1), "Sound level exceeded 90% of the time (background noise)", ""],
                    ["Maximum Level", calculatedResults.maxLevel.toFixed(1), "Highest measured sound level", ""],
                    ["Minimum Level", calculatedResults.minLevel.toFixed(1), "Lowest measured sound level", ""],
                    ["Measurement Duration", `${calculatedResults.readingsCount} readings`, "Total data points analyzed", ""],
                    ["", "", "", ""],
                    ["Note:", "L10 > L50 > L90 for the same sound or noise", "", ""]
                ];
                
                const summarySheet = XLSX.utils.aoa_to_sheet(summaryData);
                XLSX.utils.book_append_sheet(wb, summarySheet, "Summary");
                
                // Hourly analysis sheet
                if (calculatedResults.hourlyMetrics) {
                    const hourlyData = [
                        ["Hour", "Leq (dB)", "L10 (dB)", "L50 (dB)", "L90 (dB)", "Readings"],
                        ...calculatedResults.hourlyMetrics.map(hour => [
                            `Hour ${hour.hour}`,
                            hour.Leq.toFixed(1),
                            hour.L10.toFixed(1),
                            hour.L50.toFixed(1),
                            hour.L90.toFixed(1),
                            hour.readings
                        ])
                    ];
                    const hourlySheet = XLSX.utils.aoa_to_sheet(hourlyData);
                    XLSX.utils.book_append_sheet(wb, hourlySheet, "Hourly Analysis");
                }
                
                // Raw data sheet (sampled for size)
                const sampleStep = Math.max(1, Math.floor(calculatedResults.rawData.length / 10000));
                const rawData = [
                    ["Index", "Time (HH:MM:SS)", "Noise Level (dB)"],
                    ...calculatedResults.rawData
                        .filter((_, i) => i % sampleStep === 0)
                        .map((val, i) => {
                            const totalSeconds = i * sampleStep;
                            const hours = Math.floor(totalSeconds / 3600);
                            const minutes = Math.floor((totalSeconds % 3600) / 60);
                            const seconds = totalSeconds % 60;
                            const timeStr = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                            return [i * sampleStep + 1, timeStr, val];
                        })
                ];
                const rawDataSheet = XLSX.utils.aoa_to_sheet(rawData);
                XLSX.utils.book_append_sheet(wb, rawDataSheet, "Raw Data (Sampled)");
                
                // Generate filename and download
                const fileName = `Noise_Analysis_${new Date().toISOString().slice(0, 10)}.xlsx`;
                XLSX.writeFile(wb, fileName);
                
            } catch (error) {
                const errorDiv = document.getElementById('error');
                errorDiv.textContent = 'Error generating report: ' + error.message;
                errorDiv.style.display = 'block';
                console.error(error);
            }
        }
    </script>
</body>
</html>